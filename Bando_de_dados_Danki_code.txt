CURSO DE BANCO DE DADOS DANKI CODE – TERMINAL (COMANDOS) – MYSQL RELACIONAL

sudo /opt/lampp/lampp start
//iniciar os servidores do xampp.

sudo /opt/lampp/lampp stop
//parar os servidores do xampp.

sudo /opt/lampp/manager-linux-x64.run
//abre o gerenciador do xampp em interface gráfica.

sudo /opt/lampp/bin/mysql
//iniciar o mysql.

mysql -u root -p
//iniciar o mysql fora do xampp.

show databases;
//mostra todos os bancos de dados criados.

create database curso_banco_de_dados;
//cria banco de dados com o nome X.

use curso_banco_de_dados;
//inicia o banco de dados de nome X para ser trabalhado.

CREATE TABLE `posts` (`id` INT NOT NULL AUTO_INCREMENT, `título` VARCHAR(255) NOT NULL, `conteudo` TEXT NOT NULL, autor_id INT NOT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB;
//cria uma tabela de nome “posts”, com as colunas id (recebendo número inteiro não nulo auto incrementado), titulo (recebendo caracteres limitados de tamanho, não nulo), conteudo (recebendo Texto, que é para muitos caracteres, não nulo) e autor_id (recebendo inteiro não nulo); a chave identificadora da tabela é o id; e o Engine é do tipo InnoDB.

CREATE TABLE `autores` (`id` INT NOT NULL AUTO_INCREMENT, `nome` VARCHAR(255) NOT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB;

show tables;

show columns from `autores`;

INSERT INTO `autores` VALUES (null, 'joao');
//insere na tabela autores uma linha com os valores nas colunas id (valor null) e nome (joao).

show columns from `posts`;

INSERT INTO `posts` VALUES (null, 'Meu primeiro post','Conteúdo do post',0);
//insere na tabela posts uma linha com os valores nas colunas id (valor null), titulo (Meu primeiro…), conteudo (Conteudo do post) e autor_id (0).

select * from `autores`;
//mostra na tela todos os registros da tabela autores.

UPDATE `autores` set nome = 'felipe';
//atualiza a tabela autores setando todos os nomes para felipe.

UPDATE `autores` set nome = 'gui' where id = 1;
//atualiza a tabela autores setando o nome para gui somente onde o id for igual a 1.

delete from autores;
//deleta tudo que tem em autores.

delete from `autores` WHERE nome = ‘zezinho’ AND id = 4;
//deleta de autores a linha onde nome é zezinho e id 4.

select nome from `autores`;
//mostra tabela de autores só com o nome = filtra o select.

select conteudo, título from `posts`;
//mostra a saída na tela apenas a coluna “conteudo” e a coluna “título” da tabela posts.

select * from `posts` WHERE id = 1;
//seleciona tudo de post, mas filtra e mostra apenas a linha que tem id = 1.

select * from posts order by id desc;
//seleciona tudo de posts e ordena por id de forma descendente - *obs: o padrão é ascendente.

select * from posts order by título asc;
//seleciona tudo de posts e ordena por id de forma ascendente.

select * from posts group by autor_id;
//seleciona tudo de posts e filtra para mostrar na tela apenas uma saída de cada autor, ordem ascendente.

select * from `posts` group by autor_id order by id desc;
//seleciona tudo de posts e filtra para mostrar na tela apenas uma saída de cada autor, ordenando (order sempre tem que vir como última query) por id de forma descendente.

select * from `posts` where título = 'Teste título' group by autor_id order by id asc;
//seleciona tudo de posts e filtra para mostrar na tela apenas onde o título é X, uma saída de cada autor, ordenando (order sempre tem que vir como última query) por id de forma ascendente.

select * from `posts` order by id desc limit 5;
//seleciona tudo de posts, ordenando por id, de forma descendente, até o limite de 5 linhas.

select * from `posts` limit 2,3;
//seleciona tudo de posts, limitando o início na linha 2 (começa a contar no 0) e indo adiante por 3 linhas, incluindo a de início.

select * from `posts` WHERE autor_id = 2 AND id > 6;
//seleciona tudo de posts, onde o autor_id é X e a coluna id é maior que Y.

//AND, OR, <, >=, podem ser utilizados juntos ou separados.

select * from posts WHERE (autor_id = 2 OR autor_id = 0) AND título = 'Teste título';
//seleciona tudo de posts, onde autor seja X OU Y e o título seja igual a Z.

select * from posts WHERE conteudo like '%Conteúdo%';
//seleciona tudo de posts, onde a coluna “conteudo” tenha algo escrito que em algum momento apareça “Conteúdo” (ele ignora Case maiusc ou minusc) – o % significa que DEVEM ter caracteres APENAS ANTES de Conteúdo (%Conteúdo) ou que devem ter APENAS DEPOIS de Conteúdo (Conteúdo%), isso pode ser usado junto (%Conteúdo%) ou separado (%Conteúdo, Conteúdo%, %Conteúdo%).

QUERYS AVANÇADAS - INNER JOIN

SELECT autores.nome, posts.id, posts.título FROM `autores` INNER JOIN `posts` ON autores.id = posts.autor_id WHERE posts.id > 3;
// seleciona a coluna nome de autores, a coluna id de posts e a coluna título de posts, da tabela autores EM UNIÃO com a tabela posts, somente quando a coluna id de autores for igual à coluna autor_id de posts, para os casos em que o id de posts é maior que 3.

SELECT * from posts LEFT JOIN autores ON posts.autor_id = autores.id;
// seleciona tudo de posts em associação com autores, em casos onde autor_id de posts for igual a id de autores, obrigatoriamente retornando posts, pois está à ESQUERDA DA QUERY, mesmo que autores seja NULL.

SELECT * from posts RIGHT JOIN autores ON posts.autor_id = autores.id;
// seleciona tudo de posts em associação com autores, em casos onde autor_id de posts for igual a id de autores, obrigatoriamente retornando autores, pois está à DIREITA DA QUERY, mesmo que posts seja NULL.

################################

DANKICODE - MONGODb

// Instalar mongodb e mongosh (shell).

sudo systemctl start mongod
// starta o MongoDB.

sudo systemctl status mongod
// verifica status.

mongosh
// entra no MongoShell.

show databases
// mostra os bancos de dados.

use dankicode;
// verifica se tem, se não tem cria uma db chamada dankicode e a utiliza.

db.createCollection('Minha coleção');
// cria coleções (tabelas).
// não tem relação entre as coleções.

show collections
// mostra as coleções.

db.Posts.insertOne({nome:'Guilherme', conteudo:'Minha notícia de exemplo'})
// insere um objeto na collection Posts.

db.Posts.find()
// pode se colocar parâmetros de pesquisa dentro dos parênteses. Serve para ver documentos de uma coleção.

db.Posts.insertOne({comentarios:[2,3,4,6]})
// é possível inclusive colocar um array como parâmetro.

db.Posts.updateOne({nome: "Guilherme"},{$set:{nome: "Gustavo"}})
// atualiza um parâmetro, setando um novo.

db.Posts.find({"comentarios":{$ne:null}})
// retorna tudo onde existe o campo "comentarios" ou coloca o nome completo do objeto ({"comentarios":[2,3,4,6]})

db.Posts.deleteOne({nome:"Gustavo"})
db.Posts.deleteOne({_id:ObjectId('6828b600cd9e1ee6bac59f35')})
db.Posts.deleteMany({nome:"Gustavo"})
// one = específico, many = todos que match aquele critério (parâmetro: referência)

db.Posts.insertMany([{notícia:"Minha notícia", autores:["Gui","João"], comentários:[{nome:"Felipe", comentário:"Meu comentário de exemplo"},{nome:"Lucas", comentário:"Aqui é o comentário do Lucas"}]}]);
// insere vários documentos numa coleção, com vários parâmetros e referências cada. É um array ([]) de objetos.

################################
SQL – NELIO
Operações = Restrição / Projeção / Produto cartesiano / Junção.

SELECT * FROM Product, Category
// Produto cartesiano.

SELECT * FROM Product, Category WHERE Product.Category_id = Category.Id;
SELECT * FROM Product INNER JOIN Category cat ON Product.Category_id = cat.Id;
// Junção. Duas formas de escrever.

SELECT * FROM Product INNER JOIN Category cat ON Product.Category_id = cat.Id WHERE Category.Name = ‘Computers’;
// Restrição.

SELECT Product.*, Category.Name FROM Product INNER JOIN Category cat ON Product.Category_id = cat.Id WHERE Category.Name = ‘Computers’;
// Projeção.

################################



